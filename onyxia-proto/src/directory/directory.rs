// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `grpc/directory/directory.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct ExampleDirectoryWriteFileRequest {
    // message fields
    pub path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExampleDirectoryWriteFileRequest {
    fn default() -> &'a ExampleDirectoryWriteFileRequest {
        <ExampleDirectoryWriteFileRequest as ::protobuf::Message>::default_instance()
    }
}

impl ExampleDirectoryWriteFileRequest {
    pub fn new() -> ExampleDirectoryWriteFileRequest {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ExampleDirectoryWriteFileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExampleDirectoryWriteFileRequest {
        ExampleDirectoryWriteFileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &ExampleDirectoryWriteFileRequest| { &m.path },
                    |m: &mut ExampleDirectoryWriteFileRequest| { &mut m.path },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExampleDirectoryWriteFileRequest>(
                    "ExampleDirectoryWriteFileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExampleDirectoryWriteFileRequest {
        static mut instance: ::protobuf::lazy::Lazy<ExampleDirectoryWriteFileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExampleDirectoryWriteFileRequest,
        };
        unsafe {
            instance.get(ExampleDirectoryWriteFileRequest::new)
        }
    }
}

impl ::protobuf::Clear for ExampleDirectoryWriteFileRequest {
    fn clear(&mut self) {
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExampleDirectoryWriteFileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExampleDirectoryWriteFileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExampleDirectoryWriteFileResponse {
    // message fields
    pub path: ::std::string::String,
    pub body: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExampleDirectoryWriteFileResponse {
    fn default() -> &'a ExampleDirectoryWriteFileResponse {
        <ExampleDirectoryWriteFileResponse as ::protobuf::Message>::default_instance()
    }
}

impl ExampleDirectoryWriteFileResponse {
    pub fn new() -> ExampleDirectoryWriteFileResponse {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // bytes body = 2;


    pub fn get_body(&self) -> &[u8] {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.body, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ExampleDirectoryWriteFileResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if !self.body.is_empty() {
            os.write_bytes(2, &self.body)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExampleDirectoryWriteFileResponse {
        ExampleDirectoryWriteFileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &ExampleDirectoryWriteFileResponse| { &m.path },
                    |m: &mut ExampleDirectoryWriteFileResponse| { &mut m.path },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "body",
                    |m: &ExampleDirectoryWriteFileResponse| { &m.body },
                    |m: &mut ExampleDirectoryWriteFileResponse| { &mut m.body },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExampleDirectoryWriteFileResponse>(
                    "ExampleDirectoryWriteFileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExampleDirectoryWriteFileResponse {
        static mut instance: ::protobuf::lazy::Lazy<ExampleDirectoryWriteFileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExampleDirectoryWriteFileResponse,
        };
        unsafe {
            instance.get(ExampleDirectoryWriteFileResponse::new)
        }
    }
}

impl ::protobuf::Clear for ExampleDirectoryWriteFileResponse {
    fn clear(&mut self) {
        self.path.clear();
        self.body.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExampleDirectoryWriteFileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExampleDirectoryWriteFileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommonStatus {
    // message fields
    pub status_code: i32,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommonStatus {
    fn default() -> &'a CommonStatus {
        <CommonStatus as ::protobuf::Message>::default_instance()
    }
}

impl CommonStatus {
    pub fn new() -> CommonStatus {
        ::std::default::Default::default()
    }

    // int32 status_code = 1;


    pub fn get_status_code(&self) -> i32 {
        self.status_code
    }
    pub fn clear_status_code(&mut self) {
        self.status_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_status_code(&mut self, v: i32) {
        self.status_code = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CommonStatus {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.status_code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status_code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.status_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status_code != 0 {
            os.write_int32(1, self.status_code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommonStatus {
        CommonStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "status_code",
                    |m: &CommonStatus| { &m.status_code },
                    |m: &mut CommonStatus| { &mut m.status_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "message",
                    |m: &CommonStatus| { &m.message },
                    |m: &mut CommonStatus| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommonStatus>(
                    "CommonStatus",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommonStatus {
        static mut instance: ::protobuf::lazy::Lazy<CommonStatus> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommonStatus,
        };
        unsafe {
            instance.get(CommonStatus::new)
        }
    }
}

impl ::protobuf::Clear for CommonStatus {
    fn clear(&mut self) {
        self.status_code = 0;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommonStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommonStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AssignRequest {
    // message fields
    pub replication_count: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AssignRequest {
    fn default() -> &'a AssignRequest {
        <AssignRequest as ::protobuf::Message>::default_instance()
    }
}

impl AssignRequest {
    pub fn new() -> AssignRequest {
        ::std::default::Default::default()
    }

    // int32 replication_count = 1;


    pub fn get_replication_count(&self) -> i32 {
        self.replication_count
    }
    pub fn clear_replication_count(&mut self) {
        self.replication_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_replication_count(&mut self, v: i32) {
        self.replication_count = v;
    }
}

impl ::protobuf::Message for AssignRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.replication_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.replication_count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.replication_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.replication_count != 0 {
            os.write_int32(1, self.replication_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AssignRequest {
        AssignRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "replication_count",
                    |m: &AssignRequest| { &m.replication_count },
                    |m: &mut AssignRequest| { &mut m.replication_count },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AssignRequest>(
                    "AssignRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AssignRequest {
        static mut instance: ::protobuf::lazy::Lazy<AssignRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AssignRequest,
        };
        unsafe {
            instance.get(AssignRequest::new)
        }
    }
}

impl ::protobuf::Clear for AssignRequest {
    fn clear(&mut self) {
        self.replication_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AssignRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AssignRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AssignResponse {
    // message fields
    pub master: ::std::string::String,
    pub slaves: ::protobuf::RepeatedField<::std::string::String>,
    pub file_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AssignResponse {
    fn default() -> &'a AssignResponse {
        <AssignResponse as ::protobuf::Message>::default_instance()
    }
}

impl AssignResponse {
    pub fn new() -> AssignResponse {
        ::std::default::Default::default()
    }

    // string master = 1;


    pub fn get_master(&self) -> &str {
        &self.master
    }
    pub fn clear_master(&mut self) {
        self.master.clear();
    }

    // Param is passed by value, moved
    pub fn set_master(&mut self, v: ::std::string::String) {
        self.master = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_master(&mut self) -> &mut ::std::string::String {
        &mut self.master
    }

    // Take field
    pub fn take_master(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.master, ::std::string::String::new())
    }

    // repeated string slaves = 2;


    pub fn get_slaves(&self) -> &[::std::string::String] {
        &self.slaves
    }
    pub fn clear_slaves(&mut self) {
        self.slaves.clear();
    }

    // Param is passed by value, moved
    pub fn set_slaves(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.slaves = v;
    }

    // Mutable pointer to the field.
    pub fn mut_slaves(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.slaves
    }

    // Take field
    pub fn take_slaves(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.slaves, ::protobuf::RepeatedField::new())
    }

    // string file_id = 3;


    pub fn get_file_id(&self) -> &str {
        &self.file_id
    }
    pub fn clear_file_id(&mut self) {
        self.file_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_file_id(&mut self, v: ::std::string::String) {
        self.file_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_id(&mut self) -> &mut ::std::string::String {
        &mut self.file_id
    }

    // Take field
    pub fn take_file_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.file_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AssignResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.master)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.slaves)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.file_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.master.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.master);
        }
        for value in &self.slaves {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.file_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.file_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.master.is_empty() {
            os.write_string(1, &self.master)?;
        }
        for v in &self.slaves {
            os.write_string(2, &v)?;
        };
        if !self.file_id.is_empty() {
            os.write_string(3, &self.file_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AssignResponse {
        AssignResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "master",
                    |m: &AssignResponse| { &m.master },
                    |m: &mut AssignResponse| { &mut m.master },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "slaves",
                    |m: &AssignResponse| { &m.slaves },
                    |m: &mut AssignResponse| { &mut m.slaves },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "file_id",
                    |m: &AssignResponse| { &m.file_id },
                    |m: &mut AssignResponse| { &mut m.file_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AssignResponse>(
                    "AssignResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AssignResponse {
        static mut instance: ::protobuf::lazy::Lazy<AssignResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AssignResponse,
        };
        unsafe {
            instance.get(AssignResponse::new)
        }
    }
}

impl ::protobuf::Clear for AssignResponse {
    fn clear(&mut self) {
        self.master.clear();
        self.slaves.clear();
        self.file_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AssignResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AssignResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct KeepaliveRequest {
    // message fields
    pub location: ::std::string::String,
    pub status: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeepaliveRequest {
    fn default() -> &'a KeepaliveRequest {
        <KeepaliveRequest as ::protobuf::Message>::default_instance()
    }
}

impl KeepaliveRequest {
    pub fn new() -> KeepaliveRequest {
        ::std::default::Default::default()
    }

    // string location = 1;


    pub fn get_location(&self) -> &str {
        &self.location
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: ::std::string::String) {
        self.location = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut ::std::string::String {
        &mut self.location
    }

    // Take field
    pub fn take_location(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.location, ::std::string::String::new())
    }

    // int64 status = 2;


    pub fn get_status(&self) -> i64 {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = 0;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: i64) {
        self.status = v;
    }
}

impl ::protobuf::Message for KeepaliveRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.location)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.status = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.location.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.location);
        }
        if self.status != 0 {
            my_size += ::protobuf::rt::value_size(2, self.status, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.location.is_empty() {
            os.write_string(1, &self.location)?;
        }
        if self.status != 0 {
            os.write_int64(2, self.status)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeepaliveRequest {
        KeepaliveRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "location",
                    |m: &KeepaliveRequest| { &m.location },
                    |m: &mut KeepaliveRequest| { &mut m.location },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "status",
                    |m: &KeepaliveRequest| { &m.status },
                    |m: &mut KeepaliveRequest| { &mut m.status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<KeepaliveRequest>(
                    "KeepaliveRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static KeepaliveRequest {
        static mut instance: ::protobuf::lazy::Lazy<KeepaliveRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const KeepaliveRequest,
        };
        unsafe {
            instance.get(KeepaliveRequest::new)
        }
    }
}

impl ::protobuf::Clear for KeepaliveRequest {
    fn clear(&mut self) {
        self.location.clear();
        self.status = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KeepaliveRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeepaliveRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct KeepaliveResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeepaliveResponse {
    fn default() -> &'a KeepaliveResponse {
        <KeepaliveResponse as ::protobuf::Message>::default_instance()
    }
}

impl KeepaliveResponse {
    pub fn new() -> KeepaliveResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for KeepaliveResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeepaliveResponse {
        KeepaliveResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<KeepaliveResponse>(
                    "KeepaliveResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static KeepaliveResponse {
        static mut instance: ::protobuf::lazy::Lazy<KeepaliveResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const KeepaliveResponse,
        };
        unsafe {
            instance.get(KeepaliveResponse::new)
        }
    }
}

impl ::protobuf::Clear for KeepaliveResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KeepaliveResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeepaliveResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RegisterStorageServiceRequest {
    // message fields
    pub location: ::std::string::String,
    pub volume_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterStorageServiceRequest {
    fn default() -> &'a RegisterStorageServiceRequest {
        <RegisterStorageServiceRequest as ::protobuf::Message>::default_instance()
    }
}

impl RegisterStorageServiceRequest {
    pub fn new() -> RegisterStorageServiceRequest {
        ::std::default::Default::default()
    }

    // string location = 1;


    pub fn get_location(&self) -> &str {
        &self.location
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: ::std::string::String) {
        self.location = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut ::std::string::String {
        &mut self.location
    }

    // Take field
    pub fn take_location(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.location, ::std::string::String::new())
    }

    // int64 volume_id = 2;


    pub fn get_volume_id(&self) -> i64 {
        self.volume_id
    }
    pub fn clear_volume_id(&mut self) {
        self.volume_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_volume_id(&mut self, v: i64) {
        self.volume_id = v;
    }
}

impl ::protobuf::Message for RegisterStorageServiceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.location)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.volume_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.location.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.location);
        }
        if self.volume_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.volume_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.location.is_empty() {
            os.write_string(1, &self.location)?;
        }
        if self.volume_id != 0 {
            os.write_int64(2, self.volume_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegisterStorageServiceRequest {
        RegisterStorageServiceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "location",
                    |m: &RegisterStorageServiceRequest| { &m.location },
                    |m: &mut RegisterStorageServiceRequest| { &mut m.location },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "volume_id",
                    |m: &RegisterStorageServiceRequest| { &m.volume_id },
                    |m: &mut RegisterStorageServiceRequest| { &mut m.volume_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RegisterStorageServiceRequest>(
                    "RegisterStorageServiceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RegisterStorageServiceRequest {
        static mut instance: ::protobuf::lazy::Lazy<RegisterStorageServiceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RegisterStorageServiceRequest,
        };
        unsafe {
            instance.get(RegisterStorageServiceRequest::new)
        }
    }
}

impl ::protobuf::Clear for RegisterStorageServiceRequest {
    fn clear(&mut self) {
        self.location.clear();
        self.volume_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterStorageServiceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterStorageServiceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RegisterStorageServiceResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterStorageServiceResponse {
    fn default() -> &'a RegisterStorageServiceResponse {
        <RegisterStorageServiceResponse as ::protobuf::Message>::default_instance()
    }
}

impl RegisterStorageServiceResponse {
    pub fn new() -> RegisterStorageServiceResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RegisterStorageServiceResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegisterStorageServiceResponse {
        RegisterStorageServiceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<RegisterStorageServiceResponse>(
                    "RegisterStorageServiceResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RegisterStorageServiceResponse {
        static mut instance: ::protobuf::lazy::Lazy<RegisterStorageServiceResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RegisterStorageServiceResponse,
        };
        unsafe {
            instance.get(RegisterStorageServiceResponse::new)
        }
    }
}

impl ::protobuf::Clear for RegisterStorageServiceResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterStorageServiceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterStorageServiceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1egrpc/directory/directory.proto\"6\n\x20ExampleDirectoryWriteFileRe\
    quest\x12\x12\n\x04path\x18\x01\x20\x01(\tR\x04path\"K\n!ExampleDirector\
    yWriteFileResponse\x12\x12\n\x04path\x18\x01\x20\x01(\tR\x04path\x12\x12\
    \n\x04body\x18\x02\x20\x01(\x0cR\x04body\"I\n\x0cCommonStatus\x12\x1f\n\
    \x0bstatus_code\x18\x01\x20\x01(\x05R\nstatusCode\x12\x18\n\x07message\
    \x18\x02\x20\x01(\tR\x07message\"<\n\rAssignRequest\x12+\n\x11replicatio\
    n_count\x18\x01\x20\x01(\x05R\x10replicationCount\"Y\n\x0eAssignResponse\
    \x12\x16\n\x06master\x18\x01\x20\x01(\tR\x06master\x12\x16\n\x06slaves\
    \x18\x02\x20\x03(\tR\x06slaves\x12\x17\n\x07file_id\x18\x03\x20\x01(\tR\
    \x06fileId\"F\n\x10KeepaliveRequest\x12\x1a\n\x08location\x18\x01\x20\
    \x01(\tR\x08location\x12\x16\n\x06status\x18\x02\x20\x01(\x03R\x06status\
    \"\x13\n\x11KeepaliveResponse\"X\n\x1dRegisterStorageServiceRequest\x12\
    \x1a\n\x08location\x18\x01\x20\x01(\tR\x08location\x12\x1b\n\tvolume_id\
    \x18\x02\x20\x01(\x03R\x08volumeId\"\x20\n\x1eRegisterStorageServiceResp\
    onse2h\n\x10ExampleDirectory\x12T\n\tWriteFile\x12!.ExampleDirectoryWrit\
    eFileRequest\x1a\".ExampleDirectoryWriteFileResponse\"\02\xcf\x01\n\tDir\
    ectory\x12+\n\x06Assign\x12\x0e.AssignRequest\x1a\x0f.AssignResponse\"\0\
    \x128\n\tKeepalive\x12\x11.KeepaliveRequest\x1a\x12.KeepaliveResponse\"\
    \0(\x010\x01\x12[\n\x16RegisterStorageService\x12\x1e.RegisterStorageSer\
    viceRequest\x1a\x1f.RegisterStorageServiceResponse(\x01J\xf3\x0b\n\x06\
    \x12\x04\0\06\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n!\n\x02\x04\0\x12\x03\
    \x04\0=2\x16\x20message\x20for\x20examples\n\n\n\n\x03\x04\0\x01\x12\x03\
    \x04\x08(\n\x0b\n\x04\x04\0\x02\0\x12\x03\x04+;\n\x0c\n\x05\x04\0\x02\0\
    \x04\x12\x03\x04+*\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x04+1\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x0426\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x049:\
    \n\n\n\x02\x04\x01\x12\x04\x06\0\t\x01\n\n\n\x03\x04\x01\x01\x12\x03\x06\
    \x08)\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x07\x02\x12\n\r\n\x05\x04\x01\
    \x02\0\x04\x12\x04\x07\x02\x06+\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\
    \x07\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x07\t\r\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03\x07\x10\x11\n\x0b\n\x04\x04\x01\x02\x01\x12\
    \x03\x08\x02\x11\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x08\x02\x07\x12\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x08\x02\x07\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x08\x08\x0c\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \x08\x0f\x10\n\n\n\x02\x06\0\x12\x04\x0b\0\x0e\x01\n\n\n\x03\x06\0\x01\
    \x12\x03\x0b\x08\x18\n\x0c\n\x04\x06\0\x02\0\x12\x04\x0c\x02\r4\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03\x0c\x06\x0f\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03\x0c\x100\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\r\x0f0\n\x1b\n\x02\x04\
    \x02\x12\x04\x12\0\x15\x012\x0f\x20common\x20status\n\n\n\n\x03\x04\x02\
    \x01\x12\x03\x12\x08\x14\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x13\x02\x18\n\
    \r\n\x05\x04\x02\x02\0\x04\x12\x04\x13\x02\x12\x16\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03\x13\x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x13\
    \x08\x13\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x13\x16\x17\n\x0b\n\x04\
    \x04\x02\x02\x01\x12\x03\x14\x02\x15\n\r\n\x05\x04\x02\x02\x01\x04\x12\
    \x04\x14\x02\x13\x18\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x14\x02\x08\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x14\t\x10\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03\x14\x13\x14\n*\n\x02\x04\x03\x12\x03\x19\062\x1f\
    \x20message\x20for\x20directory\x20service\n\n\n\n\x03\x04\x03\x01\x12\
    \x03\x19\x08\x15\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x19\x184\n\x0c\n\x05\
    \x04\x03\x02\0\x04\x12\x03\x19\x18\x17\n\x0c\n\x05\x04\x03\x02\0\x05\x12\
    \x03\x19\x18\x1d\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x19\x1e/\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03\x1923\n\n\n\x02\x04\x04\x12\x04\x1b\0\x1f\
    \x01\n\n\n\x03\x04\x04\x01\x12\x03\x1b\x08\x16\n\x0b\n\x04\x04\x04\x02\0\
    \x12\x03\x1c\x02\x14\n\r\n\x05\x04\x04\x02\0\x04\x12\x04\x1c\x02\x1b\x18\
    \n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x1c\x02\x08\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03\x1c\t\x0f\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x1c\
    \x12\x13\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\x1d\x02\x1d\n\x0c\n\x05\x04\
    \x04\x02\x01\x04\x12\x03\x1d\x02\n\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\
    \x03\x1d\x0b\x11\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x1d\x12\x18\n\
    \x0c\n\x05\x04\x04\x02\x01\x03\x12\x03\x1d\x1b\x1c\n\x0b\n\x04\x04\x04\
    \x02\x02\x12\x03\x1e\x02\x15\n\r\n\x05\x04\x04\x02\x02\x04\x12\x04\x1e\
    \x02\x1d\x1d\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03\x1e\x02\x08\n\x0c\n\
    \x05\x04\x04\x02\x02\x01\x12\x03\x1e\t\x10\n\x0c\n\x05\x04\x04\x02\x02\
    \x03\x12\x03\x1e\x13\x14\n\n\n\x02\x04\x05\x12\x04!\0$\x01\n\n\n\x03\x04\
    \x05\x01\x12\x03!\x08\x18\n\x0b\n\x04\x04\x05\x02\0\x12\x03\"\x02\x16\n\
    \r\n\x05\x04\x05\x02\0\x04\x12\x04\"\x02!\x1a\n\x0c\n\x05\x04\x05\x02\0\
    \x05\x12\x03\"\x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03\"\t\x11\n\
    \x0c\n\x05\x04\x05\x02\0\x03\x12\x03\"\x14\x15\n\x0b\n\x04\x04\x05\x02\
    \x01\x12\x03#\x02\x13\n\r\n\x05\x04\x05\x02\x01\x04\x12\x04#\x02\"\x16\n\
    \x0c\n\x05\x04\x05\x02\x01\x05\x12\x03#\x02\x07\n\x0c\n\x05\x04\x05\x02\
    \x01\x01\x12\x03#\x08\x0e\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03#\x11\
    \x12\n\t\n\x02\x04\x06\x12\x03&\0\x1c\n\n\n\x03\x04\x06\x01\x12\x03&\x08\
    \x19\n\n\n\x02\x04\x07\x12\x04(\0+\x01\n\n\n\x03\x04\x07\x01\x12\x03(\
    \x08%\n\x0b\n\x04\x04\x07\x02\0\x12\x03)\x02\x16\n\r\n\x05\x04\x07\x02\0\
    \x04\x12\x04)\x02('\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03)\x02\x08\n\x0c\
    \n\x05\x04\x07\x02\0\x01\x12\x03)\t\x11\n\x0c\n\x05\x04\x07\x02\0\x03\
    \x12\x03)\x14\x15\n\x0b\n\x04\x04\x07\x02\x01\x12\x03*\x02\x17\n\r\n\x05\
    \x04\x07\x02\x01\x04\x12\x04*\x02)\x16\n\x0c\n\x05\x04\x07\x02\x01\x05\
    \x12\x03*\x02\x07\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03*\t\x12\n\x0c\n\
    \x05\x04\x07\x02\x01\x03\x12\x03*\x15\x16\n\n\n\x02\x04\x08\x12\x04-\0/\
    \x01\n\n\n\x03\x04\x08\x01\x12\x03-\x08&\n\n\n\x02\x06\x01\x12\x042\06\
    \x01\n\n\n\x03\x06\x01\x01\x12\x032\x08\x11\n\x0b\n\x04\x06\x01\x02\0\
    \x12\x033\x027\n\x0c\n\x05\x06\x01\x02\0\x01\x12\x033\x06\x0c\n\x0c\n\
    \x05\x06\x01\x02\0\x02\x12\x033\r\x1a\n\x0c\n\x05\x06\x01\x02\0\x03\x12\
    \x033%3\n\x0b\n\x04\x06\x01\x02\x01\x12\x034\x02N\n\x0c\n\x05\x06\x01\
    \x02\x01\x01\x12\x034\x06\x0f\n\x0c\n\x05\x06\x01\x02\x01\x05\x12\x034\
    \x10\x16\n\x0c\n\x05\x06\x01\x02\x01\x02\x12\x034\x17'\n\x0c\n\x05\x06\
    \x01\x02\x01\x06\x12\x03428\n\x0c\n\x05\x06\x01\x02\x01\x03\x12\x0349J\n\
    \x0b\n\x04\x06\x01\x02\x02\x12\x035\x02l\n\x0c\n\x05\x06\x01\x02\x02\x01\
    \x12\x035\x06\x1c\n\x0c\n\x05\x06\x01\x02\x02\x05\x12\x035\x1d#\n\x0c\n\
    \x05\x06\x01\x02\x02\x02\x12\x035$A\n\x0c\n\x05\x06\x01\x02\x02\x03\x12\
    \x035Ljb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
